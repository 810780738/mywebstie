package com.client.zookeeper;

import org.apache.zookeeper.*;
import org.apache.zookeeper.data.Stat;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;

/**
 * @Auther: Administrator
 * @Date: 2018/7/11 16:06
 * @Description:
 */
public class DistributedLock implements Lock,Watcher {

    private ZooKeeper zk = null;

    private static final String ROOT_LOCK = "/locks";

    private String lockName;//竞争资源

    private String WAIT_LOCK;//等待锁

    private String CURRENT_LOCK;//当前锁

    private CountDownLatch countDownLatch;//计数器

    private int sessionTimeOut = 30000;//连接超时

    private List<Exception> exceptionList = new ArrayList<>();

    public DistributedLock(String url,String lockName) {
        this.lockName = lockName;
        try {
            zk = new ZooKeeper(url,sessionTimeOut,this);
            Stat exists = zk.exists(ROOT_LOCK, false);
            if (exists == null){
                //根节点不存在创建根节点
                zk.create(ROOT_LOCK,new byte[0],ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (KeeperException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void lock() {
        if (exceptionList.size() > 0){
            throw new LockException(exceptionList.get(0));
        }
        if (this.tryLock()){
            System.out.println(Thread.currentThread().getName()+" "+lockName+"获得锁");
        }else {
            //等待锁
            try {
                waitForLock(WAIT_LOCK,sessionTimeOut);
            } catch (KeeperException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void lockInterruptibly() throws InterruptedException {
        this.lock();
    }

    @Override
    public boolean tryLock() {
        String splitStr = "_lock";
        if (lockName.contains(splitStr)){
            throw new LockException("锁名有误");
        }
        //创建临时有序节点
        try {
            CURRENT_LOCK = zk.create(ROOT_LOCK+"/"+lockName+splitStr,new byte[0],ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);
            System.out.println(CURRENT_LOCK+"创建成功");
            List<String> children = zk.getChildren(ROOT_LOCK, false);
            //取出所有的锁
            List<String> lockObjects =  new ArrayList<String>();
            for (String node : children){
                String _node = node.split(splitStr)[0];
                if (_node.equals(lockName)){
                    lockObjects.add(node);
                }
            }
            Collections.sort(lockObjects);//排序
            System.out.println(Thread.currentThread().getName()+"  的锁是"+CURRENT_LOCK);
            //如果当前节点是最小节点则获取成功
            if (CURRENT_LOCK.equals(ROOT_LOCK+"/"+lockObjects.get(0))){
                return true;
            }

            //若不是当前最小节点,则找到自己的前一个节点
            String prevNode = CURRENT_LOCK.substring(CURRENT_LOCK.lastIndexOf("/") + 1);
            WAIT_LOCK = lockObjects.get(Collections.binarySearch(lockObjects,prevNode) - 1);
        } catch (KeeperException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {
        if (this.tryLock()){
            return true;
        }
        return false;
    }

    @Override
    public void unlock() {
        System.out.println("释放锁"+CURRENT_LOCK);
        try {
            zk.delete(CURRENT_LOCK,-1);
            CURRENT_LOCK = null;
            zk.close();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (KeeperException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Condition newCondition() {
        return null;
    }

    //节点监视
    @Override
    public void process(WatchedEvent watchedEvent) {
        if (this.countDownLatch != null){
            this.countDownLatch.countDown();
        }
    }

    //等待锁
    public boolean waitForLock(String prev,long waitTime) throws KeeperException, InterruptedException {
            Stat exists = zk.exists(ROOT_LOCK + "/" + prev, true);
            if (exists != null){
                System.out.println(Thread.currentThread().getName()+"等待锁"+ROOT_LOCK+"/"+prev);
                this.countDownLatch = new CountDownLatch(1);
                //计数等待，若等到当前节点消失，则precess进行计数，停止等待，获取锁
                this.countDownLatch.await(waitTime,TimeUnit.MILLISECONDS);
                this.countDownLatch = null;
                System.out.println(Thread.currentThread().getName()+"获得锁");
            }
        return true;
    }

    private class LockException extends RuntimeException{
        private static final long serialVersionUID = 1L;
        public LockException(String e){
            super(e);
        }
        public LockException(Exception e){
            super(e);
        }
    }
}
